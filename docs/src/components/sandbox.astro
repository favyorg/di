

<!-- <div id="monaco-editor-embed" style="height: 800px;" /> -->
<!-- <script is:inline>
// First set up the VSCode loader in a script tag
// const getLoaderScript = document.createElement("script")
//     getLoaderScript.src = "https://www.typescriptlang.org/js/vs.loader.js"
//     getLoaderScript.async = true
//     getLoaderScript.onload = () => {
//       // Now the loader is ready, tell require where it can get the version of monaco, and the sandbox
//       // This version uses the latest version of the sandbox, which is used on the TypeScript website

//       // For the monaco version you can use unpkg or the TypeScript web infra CDN
//       // You can see the available releases for TypeScript here:
//       // https://playgroundcdn.typescriptlang.org/indexes/releases.json
//       //
//       require.config({
//         paths: {
//           vs: "https://playgroundcdn.typescriptlang.org/cdn/5.7.2/monaco/min/vs",
//           // vs: 'https://unpkg.com/@typescript-deploys/monaco-editor@4.0.5/min/vs',
//           sandbox: "https://www.typescriptlang.org/js/sandbox",
//         },
//         // This is something you need for monaco to work
//         ignoreDuplicateModules: ["vs/editor/editor.main"],
//       })

//       // Grab a copy of monaco, TypeScript and the sandbox
//       require(["vs/editor/editor.main", "vs/language/typescript/tsWorker", "sandbox/index"], (
//         main,
//         _tsWorker,
//         sandboxFactory
//       ) => {
//         const initialCode = `//import { Module } from '@favy/di';

// const Ready = Module()('Ready', () => console.log('Server ready!'));

// console.log(Ready()); // Output: "Server ready!"
// `

//         const isOK = main && window.ts && sandboxFactory
//         if (isOK) {
//           // document.getElementById("loader").parentNode.removeChild(document.getElementById("loader"))
//         } else {
//           console.error("Could not get all the dependencies of sandbox set up!")
//           console.error("main", !!main, "ts", !!window.ts, "sandbox", !!sandbox)
//           return
//         }

//         // Create a sandbox and embed it into the div #monaco-editor-embed
//         const sandboxConfig = {
//           text: initialCode,
//           compilerOptions: {},
//           domID: "monaco-editor-embed",
//         }

//         const sandbox = sandboxFactory.createTypeScriptSandbox(sandboxConfig, main, window.ts)
//         sandbox.editor.focus();
//         window.sandbox = sandbox;
//       })
//     }

//     document.body.appendChild(getLoaderScript)

import * as monaco from 'monaco-editor';
import { loader } from '@monaco-editor/loader';

async function setupMonacoEditor() {
  // Убедимся, что Monaco Editor загружается корректно
  const monacoInstance = await loader.init();

  // Создаем контейнер для редактора
  const editorContainer = document.createElement('div');
  editorContainer.id = 'monaco-editor-embed';
  document.body.appendChild(editorContainer);

  // Устанавливаем стили для контейнера
  editorContainer.style.width = '100%';
  editorContainer.style.height = '90vh';

  // Инициализация редактора с базовыми настройками
  const editor = monacoInstance.editor.create(editorContainer, {
    value: `// Начните писать TypeScript код\n\nimport fs from 'fs';\n\nconsole.log("Hello, TypeScript!");`,
    language: 'typescript',
    theme: 'vs-dark',
  });

  // Настройка окружения TypeScript
  const setupTypeScript = async () => {
    const model = editor.getModel();
    if (!model) return;

    // Настраиваем дефолтные настройки TypeScript
    monacoInstance.languages.typescript.typescriptDefaults.setCompilerOptions({
      target: monaco.languages.typescript.ScriptTarget.ESNext,
      module: monaco.languages.typescript.ModuleKind.ESNext,
      strict: true,
      moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,
      allowSyntheticDefaultImports: true,
      esModuleInterop: true,
    });

    // Добавление внешних типов (например, для Node.js)
    const nodeTypesUrl = 'https://cdn.jsdelivr.net/npm/@types/node/index.d.ts';

    const response = await fetch(nodeTypesUrl);
    const nodeTypes = await response.text();

    // Добавляем загруженные типы в среду TypeScript
    monacoInstance.languages.typescript.typescriptDefaults.addExtraLib(
      nodeTypes,
      'file:///node_modules/@types/node/index.d.ts'
    );

    console.log('Типы для Node.js загружены.');
  };

  setupTypeScript();
}

setupMonacoEditor().catch(console.error);
</script> -->

<script type="module" is:inline>
  import sdk from 'https://unpkg.com/@stackblitz/sdk@1/bundles/sdk.m.js';

  sdk.embedProjectId(
  'elementOrId',
  'vitejs-vite-nvebtdss',
  {
    forceEmbedLayout: true,
    openFile: 'src/docs/simple.ts',
    view: 'editor',
    hideExplorer: true,
  }
);
</script>
